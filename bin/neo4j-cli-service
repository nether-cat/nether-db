#!/usr/bin/env node

const path = require('path');
const dotenv = require('dotenv');
const uuidv4 = require('uuid/v4');
const { default: chalk } = require('chalk');
const seed = require('../apollo-server/utils/neo4j-cli-service/seed');
const dump = require('../apollo-server/utils/neo4j-cli-service/dump');

const secretsMarker = uuidv4();
const secretsRegExp = new RegExp(`"${secretsMarker}"`, 'g');

const stripSecrets = (k, v) => {
  if (/key|password|secret|token/i.test(k) && v || /password/i.test(k)) {
    return secretsMarker;
  }
  return v;
};

const showEnv = env => {
  let stringified = JSON.stringify(env, stripSecrets, 2);
  return chalk.gray(stringified.replace(secretsRegExp, '--HIDDEN--'));
};

const buffered = {
  content: '',
  log(...args) {
    this.content = this.content.concat(args.join(' '), '\n');
  },
};

const environment = { ...process.env };

const envFiles = [
  path.resolve('.env.local'),
  path.resolve('.env'),
];

const load = path => {
  try {
    const result = dotenv.config({ path }).parsed;
    if (!result) {
      return;
    }
    Object.keys(result).forEach(key => {
      if (environment[key] === undefined) {
        environment[key] = result[key];
      } else {
        delete result[key];
      }
    });
    if (Object.keys(result).length) {
      buffered.log(chalk.blueBright(path), '=>', showEnv(result));
    }
  } catch (err) {
    // only ignore error if file is not found
    if (err.toString().indexOf('ENOENT') < 0) {
      throw err;
    }
  }
};

buffered.log('Loading additional environment variables...\n');
envFiles.forEach(f => load(path.resolve(f)));

const builder = cmd => yargs => {
  if (cmd === taskSeed) {
    yargs.option('filters', {
      alias: ['use', 'f'],
      type: 'array',
      nargs: 1,
      default: undefined,
      describe: chalk.yellow('Filter files for operation by string token(s)'),
    });
  }
  yargs.env('NEO4J')
    .options({
      'host': {
        alias: ['uri', 'h'],
        type: 'string',
        nargs: 1,
        default: process.env.NEO4J_URI || 'bolt://localhost:7687',
        describe: chalk.yellow('Use this URI to connect with Neo4j'),
      },
      'user': {
        alias: 'u',
        type: 'string',
        nargs: 1,
        default: process.env.NEO4J_USER || 'neo4j',
        describe: chalk.yellow('Specify the user to authenticate with Neo4j'),
      },
      'password': {
        alias: 'p',
        type: 'string',
        nargs: 1,
        describe: chalk.yellow('The user\'s password for authentication'),
      },
    })
    .default('password', process.env.NEO4J_PASSWORD || 'neo4j', process.env.NEO4J_PASSWORD ? '-HIDDEN-' : '"neo4j"')
    .strict(true).hide('help').version(false);
};

const handler = execute => {
  return async argv => {
    if (argv._.length > 1) {
      return 1;
    }
    console.log(buffered.content);
    let code = await execute(argv);
    process.exit(Number.isInteger(code) ? code : 1);
  };
};

const info = cmd => {
  if (cmd === taskMigrate) return chalk.yellow('Initializes and migrates your database');
  if (cmd === taskSeed) return chalk.yellow('Adds example datasets to your database');
  if (cmd === taskDump) return chalk.yellow('Dumps all datasets from your database');
  if (cmd === taskReset) return chalk.yellow('Removes everything from your database');
  return chalk.yellow('Shows usage details and options for ') + chalk.gray('<cmd>');
};

const names = {
  migrate: 'migrate',
  seed: 'seed',
  dump: 'dump',
  reset: 'reset',
  help: 'help',
};

/** @var {object} */ const yargs = require('yargs');
const parser = yargs.wrap(Math.min(120, yargs.terminalWidth()));
(() => {
  return parser
    .usage('Usage:\n  $0 ' + chalk.gray('<cmd> [opts]'))
    .command(chalk.gray('<cmd>') + ' --help', info())
    .command(names.migrate, info(taskMigrate), builder(taskMigrate), handler(taskMigrate))
    .command(names.seed, info(taskSeed), builder(taskSeed), handler(taskSeed))
    .command(names.dump, info(taskDump), builder(taskDump), handler(taskDump))
    .command(names.reset, info(taskReset), builder(taskReset), handler(taskReset))
    .demandCommand(1, chalk.red('You need to provide a command to run this tool.'))
    .showHelpOnFail(false, 'Invoke with `--help` for usage details.\n')
    .help(names.help, info()).hide('version')
    .parse(process.argv.slice(2), (err, args, output) => {
      void 0 && console.log(chalk.gray(
        `Arguments: ${JSON.stringify(args, null, ' ')}`.replace(/\s+/g, ' '),
      ));
      if (args._.length > 1) {
        let str = args._.slice(1).filter(s => s !== 'help').join(' ');
        console.log(chalk.red(`The provided parameters are not valid: ${str}\n`));
        if (!output) {
          console.log('Invoke with `--help` for usage details.\n');
        }
      }
      if (output) {
        // remove type annotations (e.g. [string]) from the output
        output = output.replace(/\[\w+]/g, '');
        console.log(output);
      }
    });
})();

function taskMigrate(argv) {
  return new Promise(resolve => setTimeout(() => {
    resolve(console.log(`Migration task for ${chalk.underline(argv.host)} has been started!\n`));
  }, 2000));
}

function taskSeed(argv) {
  console.log(`Seeding task for ${chalk.underline(argv.host)} has been started!\n`);
  return seed(argv);
}

function taskDump(argv) {
  console.log(`Dump data task for ${chalk.underline(argv.host)} has been started!\n`);
  return dump(argv);
}

function taskReset(argv) {
  return new Promise(resolve => setTimeout(() => {
    resolve(console.log(`Reset task for ${chalk.underline(argv.host)} has been started!\n`));
  }, 2000));
}
