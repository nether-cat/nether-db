scalar JSON

scalar Date

scalar DateTime

scalar LocalDateTime

directive @auth(role: UserRole = USER) on OBJECT | FIELD_DEFINITION

directive @calcUID(name: String = "uid", from: [String] = ["_id"]) on OBJECT

directive @cypher(statement: String!) on FIELD_DEFINITION

directive @relation(name: String!, direction: String) on FIELD_DEFINITION | OBJECT

enum PrivilegeType {
  OWNER
  EDITOR
  VIEWER
  NONE
}

enum SessionState {
  AUTHORIZED
  AUTH_ERROR
  AUTH_EXPIRED
  AUTH_FROZEN
  AUTH_MISMATCH
  AUTH_PENDING
  UNAUTHORIZED
}

enum UserRole {
  ADMIN
  MANAGER
  REVIEWER
  USER
  NONE
}

input Password {
  isHash: Boolean!
  value: String!
}

interface Privileged {
  uuid: ID!
  privileges: [Privilege]
}

interface Resource {
  uuid: ID!
  restricted: Boolean
}

type Query {
  Session: Session!
  Test(_id: ID!): [JSON] @auth
  Country(_id: String, code: String, first: Int, name: String, offset: Int, orderBy: String, uuid: ID): [Country] @auth
  Lake(_id: String, catchmentArea: Float, first: Int, latitude: Float, longitude: Float, maxDepth: Float, name: String, offset: Int, orderBy: String, surfaceArea: Float, surfaceLevel: Float, uuid: ID, waterBodyVolume: Float): [Lake] @auth
  RecordsByCollection(uuid: ID): [Record] @auth
}

type Mutation {
  Login(email: String!, password: Password!): Session!
  Logout: Session!
  Test(_id: ID!, payload: JSON!): JSON @auth
  CreateCountry(code: String!, name: String!, uuid: ID): Country @auth
  DeleteCountry(uuid: ID!): Country @auth
  UpdateCountry(code: String, name: String, uuid: ID!): Country @auth
}

type Attribute {
  uuid: ID!
  name: String!
  description: String
  proxy(first: Int = 1, offset: Int = 0): [Proxy] @relation(name: "BELONGS_TO", direction: "OUT")
}

type Collection {
  uuid: ID!
  file: String!
  label: String
  analysisMethod: String
  ageResolution: Float
  depthResolution: Float
  comments: String
  url: String
  attributes(first: Int = 100, offset: Int = 0): [Attribute] @relation(name: "INCLUDES", direction: "OUT")
  core(first: Int = 1, offset: Int = 0): [Core] @relation(name: "SAMPLED_FROM", direction: "OUT")
  proxy(first: Int = 1, offset: Int = 0): [Proxy] @relation(name: "BELONGS_TO", direction: "OUT")
  publication(first: Int = 1, offset: Int = 0): [Publication] @relation(name: "PUBLISHED_IN", direction: "OUT")
  records(first: Int = 100, offset: Int = 0): [Record] @cypher(statement: "MATCH (m:Record)-[:COLLECTED_IN]->(this) RETURN m LIMIT {first}")
}

type Core {
  uuid: ID!
  label: String
  latitude: Float
  longitude: Float
  coringMethod: String
  drillDate: Date
  waterDepth: Float
  composite: Boolean
  ageDepthMethod: String
  comments: String
  collections(first: Int = 100, offset: Int = 0): [Collection] @relation(name: "SAMPLED_FROM", direction: "IN")
  lake(first: Int = 1, offset: Int = 0): [Lake] @relation(name: "FROM_LAKE", direction: "OUT")
}

type Continent {
  uuid: ID!
  "Continent code as defined in the package [countries-list](https://www.npmjs.com/package/countries-list)."
  code: String!
  "English continent name as defined in the package [countries-list](https://www.npmjs.com/package/countries-list)."
  name: String!
  countries(first: Int = 100, offset: Int = 0): [Country] @relation(name: "LOCATED_IN", direction: "IN")
}

type Country {
  uuid: ID!
  "Country code as specified by the standard [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)."
  code: String!
  "English country name as defined in the package [countries-list](https://www.npmjs.com/package/countries-list)."
  name: String!
  continents(first: Int = 100, offset: Int = 0): [Continent] @relation(name: "LOCATED_IN", direction: "OUT")
  lakes(first: Int = 100, offset: Int = 0): [Lake] @relation(name: "LOCATED_IN", direction: "IN")
}

type Group implements Privileged {
  uuid: ID!
  name: String!
  members: [Membership]
  privileges: [Privilege]
}

type Lake {
  uuid: ID!
  name: String!
  latitude: Float!
  longitude: Float!
  maxDepth: Float
  surfaceLevel: Float
  surfaceArea: Float
  catchmentArea: Float
  waterBodyVolume: Float
  cores(first: Int = 100, offset: Int = 0): [Core] @relation(name: "FROM_LAKE", direction: "IN")
  countries(first: Int = 100, offset: Int = 0): [Country] @relation(name: "LOCATED_IN", direction: "OUT")
}

type Membership @relation(name: "MEMBER_OF") {
  _id: ID!
  from: User!
  to: Group!
  moderates: Boolean
}

type Privilege @relation(name: "HAS_PRIVILEGE") {
  _id: ID!
  from: Privileged!
  to: Resource!
  type: PrivilegeType
}

type Proxy {
  uuid: ID!
  name: String!
  description: String
  attributes(first: Int = 100, offset: Int = 0): [Attribute] @relation(name: "BELONGS_TO", direction: "IN")
  collections(first: Int = 100, offset: Int = 0): [Collection] @relation(name: "BELONGS_TO", direction: "IN")
}

type Publication {
  uuid: ID!
  title: String!
  authors: String
  year: Int
  doi: String
  source: String
  url: String
  email: String
  abstract: String
  collections(first: Int = 100, offset: Int = 0): [Collection] @relation(name: "PUBLISHED_IN", direction: "IN")
}

type Record {
  _id: ID!
  data: JSON!
}

type Session {
  _id: ID!
  user: String!
  userRole: UserRole!
  token: String
  expires: Float!
  state: SessionState!
}

type User implements Privileged {
  uuid: ID!
  firstName: String
  lastName: String
  role: String
  department: String
  institution: String
  email: String!
  password: String!
  userRole: UserRole!
  disabled: Boolean!
  frozen: Boolean!
  memberships: [Membership]
  privileges: [Privilege]
}
