scalar JSON

directive @auth(role: UserRole = USER) on OBJECT | FIELD_DEFINITION

directive @cypher(statement: String!) on FIELD_DEFINITION

directive @relation(
  name: String!,
  direction: _RelationDirections,
  from: String,
  to: String
) on FIELD_DEFINITION | OBJECT

enum AccessLevel {
  OWNER
  EDITOR
  VIEWER
  NONE
}

enum SessionState {
  AUTHORIZED
  AUTH_APPROVAL
  AUTH_EMAIL
  AUTH_ERROR
  AUTH_EXPIRED
  AUTH_FROZEN
  AUTH_PENDING
  AUTH_UNKNOWN
  UNAUTHORIZED
}

enum UserRole {
  ADMIN
  MANAGER
  REVIEWER
  USER
  NONE
}

input Password {
  isHash: Boolean!
  value: String!
}

input UserInput {
  titlePrefix: String
  fullName: String!
  shortName: String
  role: String
  department: String
  institution: String
  email: String!
  password: Password!
}

interface Authorizable {
  uuid: ID!
  permissions: [Permission]
}

interface Entity {
  uuid: ID!
  created: _Neo4jDateTime!
  updated: _Neo4jDateTime!
}

interface Protectable {
  uuid: ID!
  protected: Boolean
  permissions: [Permission]
}

type Query {
  Session: Session!
  Confirmation(token: String!): JSON!
  Test(_id: ID!): [JSON] @auth
  Country(_id: String, uuid: ID, code: String, name: String, first: Int, offset: Int, orderBy: String): [Country] @auth
  Dataset(_id: String, uuid: ID, first: Int, offset: Int, orderBy: String): [Dataset] @auth
  Event: [Event] @cypher(statement: """
    MATCH (e:Event)-[ref]-(r:Record)
    WITH e {
      .*,
      ageMean: avg(ref.age),
      ageMin: min(ref.age),
      ageMax: max(ref.age)
    }
    RETURN e
    ORDER BY e.ageMean
  """)
  Lake(_id: String, uuid: ID, name: String, first: Int, offset: Int, orderBy: String): [Lake] @auth
  User(_id: String, uuid: ID, email: String, first: Int, offset: Int, orderBy: String): [User] @auth(role: ADMIN)
}

type Mutation {
  Login(email: String!, password: Password!): Session!
  Logout: Session!
  Signup(user: UserInput!, probeOnly: Boolean): JSON!
  Confirm(token: String!): JSON!
  Revoke(token: String!): JSON!
  UpdateUser(uuid: ID!, emailVerified: Boolean, frozen: Boolean, userRole: UserRole, updated: _Neo4jDateTimeInput): User! @auth(role: ADMIN)
  Test(_id: ID!, payload: JSON!): JSON @auth
}

type Attribute implements Entity {
  uuid: ID!
  created: _Neo4jDateTime!
  updated: _Neo4jDateTime!
  name: String!
  description: String
  categories(first: Int = 100, offset: Int = 0): [Category] @relation(name: "BELONGS_TO", direction: OUT)
}

type Category implements Entity {
  uuid: ID!
  created: _Neo4jDateTime!
  updated: _Neo4jDateTime!
  name: String!
  description: String
  attributes(first: Int = 100, offset: Int = 0): [Attribute] @relation(name: "BELONGS_TO", direction: IN)
  datasets(first: Int = 100, offset: Int = 0): [Dataset] @relation(name: "BELONGS_TO", direction: IN)
}

type Core implements Entity {
  uuid: ID!
  created: _Neo4jDateTime!
  updated: _Neo4jDateTime!
  label: String
  latitude: Float
  longitude: Float
  coringMethod: String
  drillDate: Int
  waterDepth: Float
  composite: Boolean
  ageDepthMethod: String
  comments: String
  datasets(first: Int = 100, offset: Int = 0): [Dataset] @relation(name: "SAMPLED_FROM", direction: IN)
  lake(first: Int = 1, offset: Int = 0): [Lake] @relation(name: "FROM_LAKE", direction: OUT)
}

type Continent implements Entity {
  uuid: ID!
  created: _Neo4jDateTime!
  updated: _Neo4jDateTime!
  "Continent code as defined in the package [countries-list](https://www.npmjs.com/package/countries-list)."
  code: String!
  "English continent name as defined in the package [countries-list](https://www.npmjs.com/package/countries-list)."
  name: String!
  countries(first: Int = 100, offset: Int = 0): [Country] @relation(name: "LOCATED_IN", direction: IN)
}

type Country implements Entity {
  uuid: ID!
  created: _Neo4jDateTime!
  updated: _Neo4jDateTime!
  "Country code as specified by the standard [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)."
  code: String!
  "English country name as defined in the package [countries-list](https://www.npmjs.com/package/countries-list)."
  name: String!
  continents(first: Int = 100, offset: Int = 0): [Continent] @relation(name: "LOCATED_IN", direction: OUT)
  lakes(first: Int = 100, offset: Int = 0): [Lake] @relation(name: "LOCATED_IN", direction: IN)
}

type Dataset implements Entity {
  uuid: ID!
  created: _Neo4jDateTime!
  updated: _Neo4jDateTime!
  file: String!
  label: String
  samples: Int @cypher(statement: "MATCH (m:Record)-[r:RECORDED_IN]->(this) RETURN count(m)")
  ageMin: Float
  ageMax: Float
  depthMin: Float
  depthMax: Float
  ageSpan: Float
  ageResolution: Float
  depthSpan: Float
  depthResolution: Float
  analysisMethod: String
  comments: String
  url: String
  distributor: String
  attributes(first: Int = 100, offset: Int = 0): [Attribute] @cypher(statement: "MATCH (this)-[r:INCLUDES]->(m:Attribute) RETURN m ORDER by r.__colNum__ SKIP {offset} LIMIT {first}")
  categories(first: Int = 100, offset: Int = 0): [Category] @relation(name: "BELONGS_TO", direction: OUT)
  core(first: Int = 1, offset: Int = 0): [Core] @relation(name: "SAMPLED_FROM", direction: OUT)
  publication(first: Int = 1, offset: Int = 0): [Publication] @relation(name: "PUBLISHED_IN", direction: OUT)
  records(first: Int = 100, offset: Int = 0): [JSON] @cypher(statement: "MATCH (m:Record)-[r:RECORDED_IN]->(this) WITH m ORDER BY r.__rowNum__ ASC SKIP {offset} LIMIT {first} RETURN collect(m { .* })")
}

type Event implements Entity {
  uuid: ID!
  created: _Neo4jDateTime!
  updated: _Neo4jDateTime!
  name: String!
  ageMax: Float
  ageMean: Float
  ageMin: Float
  datasets(first: Int = 100, offset: Int = 0): [Dataset] @cypher(statement: "MATCH (e:Event { uuid: this.uuid })-[ref]-(r:Record)--(d:Dataset) WITH DISTINCT d SKIP {offset} LIMIT {first} RETURN d")
  lakes(first: Int = 100, offset: Int = 0): [Lake] @cypher(statement: "MATCH (e:Event { uuid: this.uuid })-[ref]-(r:Record)--(d:Dataset)--(:Core)--(l:Lake) WITH DISTINCT l SKIP {offset} LIMIT {first} RETURN l")
}

type Group implements Entity & Authorizable {
  uuid: ID!
  created: _Neo4jDateTime!
  updated: _Neo4jDateTime!
  name: String!
  members: [Membership]
  permissions: [Permission]
}

type Lake implements Entity {
  uuid: ID!
  created: _Neo4jDateTime!
  updated: _Neo4jDateTime!
  name: String!
  latitude: Float!
  longitude: Float!
  maxDepth: Float
  surfaceLevel: Float
  surfaceArea: Float
  catchmentArea: Float
  waterBodyVolume: Float
  cores(first: Int = 100, offset: Int = 0): [Core] @relation(name: "FROM_LAKE", direction: IN)
  countries(first: Int = 100, offset: Int = 0): [Country] @relation(name: "LOCATED_IN", direction: OUT)
}

type Membership @relation(name: "MEMBER_OF") {
  uuid: ID!
  from: User!
  to: Group!
  moderates: Boolean
}

type Permission @relation(name: "HAS_PERMISSION") {
  uuid: ID!
  from: Authorizable!
  to: Protectable!
  level: AccessLevel
}

type Publication implements Entity {
  uuid: ID!
  created: _Neo4jDateTime!
  updated: _Neo4jDateTime!
  resolved: _Neo4jDateTime
  citation: String
  title: String
  authors: String
  year: Int
  doi: String
  source: String
  url: String
  email: String
  abstract: String
  datasets(first: Int = 100, offset: Int = 0): [Dataset] @relation(name: "PUBLISHED_IN", direction: IN)
}

type Session {
  _id: ID!
  user: String!
  userRole: UserRole!
  token: String
  expires: Float!
  state: SessionState!
}

type User implements Entity & Authorizable {
  uuid: ID!
  created: _Neo4jDateTime!
  updated: _Neo4jDateTime!
  titlePrefix: String
  fullName: String!
  shortName: String
  role: String
  department: String
  institution: String
  email: String!
  password: String!
  userRole: UserRole!
  deactivated: Boolean!
  emailVerified: Boolean!
  frozen: Boolean!
  reason: String
  memberships: [Membership]
  permissions: [Permission]
}

# The following types are implemented by Neo4j

type _Neo4jDate {
  year: Int
  month: Int
  day: Int
  formatted: String
}

input _Neo4jDateInput {
  year: Int
  month: Int
  day: Int
  formatted: String
}

type _Neo4jDateTime {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String
  formatted: String
}

input _Neo4jDateTimeInput {
  year: Int
  month: Int
  day: Int
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String
  formatted: String
}

type _Neo4jTime {
  hour: Int
  minute: Int
  second: Int
  millisecond: Int
  microsecond: Int
  nanosecond: Int
  timezone: String
  formatted: String
}

input _Neo4jTimeInput {
  hour: Int
  minute: Int
  second: Int
  nanosecond: Int
  millisecond: Int
  microsecond: Int
  timezone: String
  formatted: String
}

enum _RelationDirections {
  IN
  OUT
}
