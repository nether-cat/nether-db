# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

interface Authorizable {
  permissions: [Permission]
  uuid: ID!
}

interface Entity {
  created: _Neo4jDateTime!
  updated: _Neo4jDateTime!
  uuid: ID!
}

interface Protectable {
  permissions: [Permission]
  protected: Boolean
  uuid: ID!
}

type Attribute implements Entity {
  categories(first: Int = 100, offset: Int = 0): [Category]
  created: _Neo4jDateTime!
  description: String
  name: String!
  updated: _Neo4jDateTime!
  uuid: ID!
}

type Category implements Entity {
  attributes(first: Int = 100, offset: Int = 0): [Attribute]
  created: _Neo4jDateTime!
  datasets(first: Int = 100, offset: Int = 0): [Dataset]
  description: String
  name: String!
  updated: _Neo4jDateTime!
  uuid: ID!
}

type Continent implements Entity {
  "Continent code as defined in the package [countries-list](https://www.npmjs.com/package/countries-list)."
  code: String!
  countries(first: Int = 100, offset: Int = 0): [Country]
  created: _Neo4jDateTime!
  "English continent name as defined in the package [countries-list](https://www.npmjs.com/package/countries-list)."
  name: String!
  updated: _Neo4jDateTime!
  uuid: ID!
}

type Core implements Entity {
  ageDepthMethod: String
  comments: String
  composite: Boolean
  coringMethod: String
  created: _Neo4jDateTime!
  datasets(first: Int = 100, offset: Int = 0): [Dataset]
  drillDate: Int
  label: String
  lake(first: Int = 1, offset: Int = 0): [Lake]
  latitude: Float
  longitude: Float
  updated: _Neo4jDateTime!
  uuid: ID!
  waterDepth: Float
}

type Country implements Entity {
  "Country code as specified by the standard [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)."
  code: String!
  continents(first: Int = 100, offset: Int = 0): [Continent]
  created: _Neo4jDateTime!
  lakes(first: Int = 100, offset: Int = 0): [Lake]
  "English country name as defined in the package [countries-list](https://www.npmjs.com/package/countries-list)."
  name: String!
  updated: _Neo4jDateTime!
  uuid: ID!
}

type Dataset implements Entity {
  ageMax: Float
  ageMin: Float
  ageResolution: Float
  ageSpan: Float
  analysisMethod: String
  attributes(first: Int = 100, offset: Int = 0): [Attribute]
  categories(first: Int = 100, offset: Int = 0): [Category]
  comments: String
  core(first: Int = 1, offset: Int = 0): [Core]
  created: _Neo4jDateTime!
  depthMax: Float
  depthMin: Float
  depthResolution: Float
  depthSpan: Float
  distributor: String
  file: String!
  label: String
  publication(first: Int = 1, offset: Int = 0): [Publication]
  records(first: Int = 100, offset: Int = 0): [JSON]
  samples: Int
  updated: _Neo4jDateTime!
  url: String
  uuid: ID!
}

type Event implements Entity {
  ageMax: Float
  ageMean: Float
  ageMin: Float
  created: _Neo4jDateTime!
  datasets(first: Int = 100, offset: Int = 0): [Dataset]
  lakes(first: Int = 100, offset: Int = 0): [Lake]
  name: String!
  updated: _Neo4jDateTime!
  uuid: ID!
}

type Group implements Authorizable & Entity {
  created: _Neo4jDateTime!
  members: [Membership]
  name: String!
  permissions: [Permission]
  updated: _Neo4jDateTime!
  uuid: ID!
}

type Lake implements Entity {
  catchmentArea: Float
  cores(first: Int = 100, offset: Int = 0): [Core]
  countries(first: Int = 100, offset: Int = 0): [Country]
  created: _Neo4jDateTime!
  latitude: Float!
  longitude: Float!
  maxDepth: Float
  name: String!
  surfaceArea: Float
  surfaceLevel: Float
  updated: _Neo4jDateTime!
  uuid: ID!
  waterBodyVolume: Float
}

type Membership {
  from: User!
  moderates: Boolean
  to: Group!
  uuid: ID!
}

type Mutation {
  Confirm(token: String!): JSON!
  Login(email: String!, password: Password!): Session!
  Logout: Session!
  Revoke(token: String!): JSON!
  Signup(probeOnly: Boolean, user: UserInput!): JSON!
  Test(_id: ID!, payload: JSON!): JSON
  UpdateUser(emailVerified: Boolean, frozen: Boolean, updated: _Neo4jDateTimeInput, userRole: UserRole, uuid: ID!): User!
}

type Permission {
  from: Authorizable!
  level: AccessLevel
  to: Protectable!
  uuid: ID!
}

type Publication implements Entity {
  abstract: String
  authors: String
  citation: String
  created: _Neo4jDateTime!
  datasets(first: Int = 100, offset: Int = 0): [Dataset]
  doi: String
  email: String
  resolved: _Neo4jDateTime
  source: String
  title: String
  updated: _Neo4jDateTime!
  url: String
  uuid: ID!
  year: Int
}

type Query {
  Confirmation(token: String!): JSON!
  Country(_id: String, code: String, first: Int, name: String, offset: Int, orderBy: String, uuid: ID): [Country]
  Dataset(_id: String, first: Int, offset: Int, orderBy: String, uuid: ID): [Dataset]
  Event: [Event]
  Lake(_id: String, first: Int, name: String, offset: Int, orderBy: String, uuid: ID): [Lake]
  Session: Session!
  Test(_id: ID!): [JSON]
  User(_id: String, email: String, first: Int, offset: Int, orderBy: String, uuid: ID): [User]
}

type Session {
  _id: ID!
  expires: Float!
  state: SessionState!
  token: String
  user: String!
  userRole: UserRole!
}

type User implements Authorizable & Entity {
  created: _Neo4jDateTime!
  deactivated: Boolean!
  department: String
  email: String!
  emailVerified: Boolean!
  frozen: Boolean!
  fullName: String!
  institution: String
  memberships: [Membership]
  password: String!
  permissions: [Permission]
  reason: String
  role: String
  shortName: String
  titlePrefix: String
  updated: _Neo4jDateTime!
  userRole: UserRole!
  uuid: ID!
}

type _Neo4jDate {
  day: Int
  formatted: String
  month: Int
  year: Int
}

type _Neo4jDateTime {
  day: Int
  formatted: String
  hour: Int
  microsecond: Int
  millisecond: Int
  minute: Int
  month: Int
  nanosecond: Int
  second: Int
  timezone: String
  year: Int
}

type _Neo4jTime {
  formatted: String
  hour: Int
  microsecond: Int
  millisecond: Int
  minute: Int
  nanosecond: Int
  second: Int
  timezone: String
}

enum AccessLevel {
  EDITOR
  NONE
  OWNER
  VIEWER
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

enum SessionState {
  AUTHORIZED
  AUTH_APPROVAL
  AUTH_EMAIL
  AUTH_ERROR
  AUTH_EXPIRED
  AUTH_FROZEN
  AUTH_PENDING
  AUTH_UNKNOWN
  UNAUTHORIZED
}

enum UserRole {
  ADMIN
  MANAGER
  NONE
  REVIEWER
  USER
}

enum _RelationDirections {
  IN
  OUT
}

input Password {
  isHash: Boolean!
  value: String!
}

input UserInput {
  department: String
  email: String!
  fullName: String!
  institution: String
  password: Password!
  role: String
  shortName: String
  titlePrefix: String
}

input _Neo4jDateInput {
  day: Int
  formatted: String
  month: Int
  year: Int
}

input _Neo4jDateTimeInput {
  day: Int
  formatted: String
  hour: Int
  microsecond: Int
  millisecond: Int
  minute: Int
  month: Int
  nanosecond: Int
  second: Int
  timezone: String
  year: Int
}

input _Neo4jTimeInput {
  formatted: String
  hour: Int
  microsecond: Int
  millisecond: Int
  minute: Int
  nanosecond: Int
  second: Int
  timezone: String
}


"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The `Upload` scalar type represents a file upload."
scalar Upload
