# This schema file is only for integration with plugin features of JS GraphQL v2.x in a JetBrains IDE.
# Add built-in or custom definitions that are being ignored by JS GraphQL v2.x during introspection below.

scalar JSON

scalar Date

scalar DateTime

scalar LocalDateTime

# TODO: This comment and the lines above schould be restored manually after a new schema introspection!

# This file was generated based on ".graphqlconfig" at Fri Mar 15 02:32:45 CET 2019. Do not edit manually.

interface Privileged {
  privileges: [Privilege]
  uuid: ID!
}

interface Resource {
  restricted: Boolean
  uuid: ID!
}

type Attribute {
  description: String
  name: String!
  proxy(first: Int = 1, offset: Int = 0): [Proxy]
  uuid: ID!
}

type Collection {
  ageResolution: Float
  analysisMethod: String
  attributes(first: Int = 100, offset: Int = 0): [Attribute]
  comments: String
  core(first: Int = 1, offset: Int = 0): [Core]
  depthResolution: Float
  file: String!
  label: String
  proxy(first: Int = 1, offset: Int = 0): [Proxy]
  publication(first: Int = 1, offset: Int = 0): [Publication]
  records(first: Int = 100, offset: Int = 0): [Record]
  url: String
  uuid: ID!
}

type Continent {
  "Continent code as defined in the package [countries-list](https://www.npmjs.com/package/countries-list)."
  code: String!
  countries(first: Int = 100, offset: Int = 0): [Country]
  "English continent name as defined in the package [countries-list](https://www.npmjs.com/package/countries-list)."
  name: String!
  uuid: ID!
}

type Core {
  ageDepthMethod: String
  collections(first: Int = 100, offset: Int = 0): [Collection]
  comments: String
  composite: Boolean
  coringMethod: String
  drillDate: Date
  label: String
  lake(first: Int = 1, offset: Int = 0): [Lake]
  latitude: Float
  longitude: Float
  uuid: ID!
  waterDepth: Float
}

type Country {
  "Country code as specified by the standard [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)."
  code: String!
  continents(first: Int = 100, offset: Int = 0): [Continent]
  lakes(first: Int = 100, offset: Int = 0): [Lake]
  "English country name as defined in the package [countries-list](https://www.npmjs.com/package/countries-list)."
  name: String!
  uuid: ID!
}

type Group implements Privileged {
  members: [Membership]
  name: String!
  privileges: [Privilege]
  uuid: ID!
}

type Lake {
  catchmentArea: Float
  cores(first: Int = 100, offset: Int = 0): [Core]
  countries(first: Int = 100, offset: Int = 0): [Country]
  latitude: Float!
  longitude: Float!
  maxDepth: Float
  name: String!
  surfaceArea: Float
  surfaceLevel: Float
  uuid: ID!
  waterBodyVolume: Float
}

type Membership {
  _id: ID!
  from: User!
  moderates: Boolean
  to: Group!
}

type Mutation {
  CreateCountry(code: String!, name: String!, uuid: ID): Country
  DeleteCountry(uuid: ID!): Country
  Login(email: String!, password: Password!): Session!
  Logout: Session!
  Test(_id: ID!, payload: JSON!): JSON
  UpdateCountry(code: String, name: String, uuid: ID!): Country
}

type Privilege {
  _id: ID!
  from: Privileged!
  to: Resource!
  type: PrivilegeType
}

type Proxy {
  attributes(first: Int = 100, offset: Int = 0): [Attribute]
  collections(first: Int = 100, offset: Int = 0): [Collection]
  description: String
  name: String!
  uuid: ID!
}

type Publication {
  abstract: String
  authors: String
  collections(first: Int = 100, offset: Int = 0): [Collection]
  doi: String
  email: String
  source: String
  title: String!
  url: String
  uuid: ID!
  year: Float
}

type Query {
  Country(_id: String, code: String, first: Int, name: String, offset: Int, orderBy: String, uuid: ID): [Country]
  Lake(_id: String, catchmentArea: Float, first: Int, latitude: Float, longitude: Float, maxDepth: Float, name: String, offset: Int, orderBy: String, surfaceArea: Float, surfaceLevel: Float, uuid: ID, waterBodyVolume: Float): [Lake]
  Session: Session!
  Test(_id: ID!): [JSON]
}

type Record {
  _id: ID!
  data: JSON!
}

type Session {
  _id: ID!
  expires: Float!
  state: SessionState!
  token: String
  user: String!
  userRole: UserRole!
}

type User implements Privileged {
  department: String
  disabled: Boolean!
  email: String!
  firstName: String
  frozen: Boolean!
  institution: String
  lastName: String
  memberships: [Membership]
  password: String!
  privileges: [Privilege]
  role: String
  userRole: UserRole!
  uuid: ID!
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

enum PrivilegeType {
  EDITOR
  NONE
  OWNER
  VIEWER
}

enum SessionState {
  AUTHORIZED
  AUTH_ERROR
  AUTH_EXPIRED
  AUTH_FROZEN
  AUTH_MISMATCH
  AUTH_PENDING
  UNAUTHORIZED
}

enum UserRole {
  ADMIN
  MANAGER
  NONE
  REVIEWER
  USER
}

input Password {
  isHash: Boolean!
  value: String!
}
