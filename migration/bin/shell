#!/usr/bin/env node

const startTime = Date.now();

const fs = require('fs');
const XLSX = require('xlsx');
const util = require('util');
const latinize = require('latinize');

const seraph = require('../lib/server/database/seraph');
const database = require('../lib/server/database');
const CountriesList = require('countries-list');

let replacements = {
  // publication
  'weblink': 'url',
  'contact_mail': 'email',
  // lake
  'surface_level_elevation': 'surface_level',
  // core
  'core_label': 'label',
  // collection
  'proxytype': 'proxy',
  'name_of_dataset': 'label',
};

let successCount = 0, recordsCount = 0, errors = [];
let fileName, files, sheetName;
let args = process.argv.slice(2);
if (args.length === 2) {
  sheetName = args[0];
  fileName = args[1];
  files = [fileName];
} else if (args.length === 1) {
  fileName = args[0];
  files = [fileName];
} else {
  files = [];
  let path = __dirname + '/../import';
  let entries = fs.readdirSync(path);
  entries.forEach(entry => {
    if (/\.xlsx?$/.test(entry)) {
      files.push(path + '/' + entry);
    }
  });
}

const importData = async function (file) {
  if (!file) {
    throw new Error('No filename passed as argument!');
  }
  let sheet;
  let workbook = XLSX.readFile(file);
  let proxyName = !!sheetName
    ? sheetName.toLowerCase()
    : workbook.Sheets['Metadata']['G72'].v.trim().toLowerCase();
  try {
    let index = proxyName.charAt(0).toUpperCase() + proxyName.slice(1).toLowerCase();
    sheet = workbook.Sheets[index];
  } catch (e) {
    throw new Error('Sheet with records not found!');
  }
  let regex = /^[A-Z]{1,3}\d+:([A-Z]{1,3})(\d+)$/g;
  let [, lastColumn, lastRow] = regex.exec(sheet['!ref']);
  let namesRange = util.format('A8:%s%s', lastColumn, '8');
  let valuesRange = util.format('A9:%s%s', lastColumn, lastRow);
  let columnNames = XLSX.utils.sheet_to_json(sheet, {header: 1, range: namesRange})[0].map(
    el => el.toLowerCase().replace(/[[\]{}()]/g, '').replace(/[-/+\\.,;:#_]+/g, ' ').trim().replace(/\s+/g, '_')
  );
  let metadata = XLSX.utils.sheet_to_json(workbook.Sheets['Metadata'], {header: 'A', range: 'B1:G81'});
  let records = XLSX.utils.sheet_to_json(sheet, {header: columnNames, range: valuesRange});

  metadata = metadata.reduce((accumulator, {B: property, G: value, __rowNum__: rowNumber}) => {
    property = typeof property === 'string' ? property.trim() : property;
    value = typeof value === 'string' ? value.trim().replace(/^[-/]$/g, '') : value;
    if (!value || !property) {
      return accumulator;
    }
    let key = rowNumber < 26 ?
      'publication' : rowNumber < 47 ?
        'lake' : rowNumber < 65 ?
          'core' : 'collection';
    property = property.toLowerCase()
      .replace(/[[\]{}()]/g, '')
      .replace(/[-/+\\.,;:#_]+/g, ' ')
      .trim()
      .replace(/\s+/g, '_');
    if (replacements.hasOwnProperty(property)) {
      property = replacements[property];
    }
    accumulator[key][property] = value;
    return accumulator;
  }, {
    publication: {}, lake: {}, core: {}, collection: {}
  });
  if (!metadata.core['label'] || metadata.core['label'].slice(0, 8) === 'NO LABEL') {
    let countryCode = metadata.lake['country'].toUpperCase();
    let lakeAbbr = latinize(metadata.lake['name']).toUpperCase().replace(/\W/g, '').slice(0, 4);
    let year = metadata.publication['year'];
    let suffix = Math.floor(Math.random() * Math.floor(255)).toString(16).toUpperCase();
    suffix = suffix.length === 1 ? `0${suffix}` : suffix;
    let append = metadata.core['label'].slice(0, 8) === 'NO LABEL' ? metadata.core['label'].slice(8) : '';
    metadata.core['label'] = `GFZ/${countryCode}-${lakeAbbr}-${year}/${suffix}${append}`;
  }
  let collection = Object.assign({}, metadata.collection, {
    sampledFrom: Object.assign({}, metadata.core, {
      drilledFrom: Object.assign({}, metadata.lake, {
        locatedIn: {},
      }),
    }),
    referencedBy: [],
    providesWith: {},
    includes: [],
  });
  let {
    /** @type {Model} */ Attribute,
    /** @type {Model} */ Collection,
    /** @type {Model} */ Core,
    /** @type {Model} */ Country,
    /** @type {Model} */ Lake,
    /** @type {Model} */ Proxy,
    /** @type {Model} */ Publication,
    /** @type {Model} */ Record,
    /** @type {Model} */ Synonym,
    /** @type {Model} */ User,
  } = seraph.models;
  return Promise.resolve()
    .then(() => Core.promise.where({ label: metadata.core['label']}))
    .then(core => {
      if (core.length) {
        collection.sampledFrom = core[0];
      }
      return Lake.promise.where({ name: metadata.lake['name'] });
    })
    .then(lake => {
      let countryCode;
      if (lake.length) {
        collection.sampledFrom.drilledFrom = lake[0];
        countryCode = collection.sampledFrom.drilledFrom.locatedIn.code;
      } else {
        countryCode = metadata.lake['country'];
      }
      return Country.promise.where({ code: countryCode });
    })
    .then(countries => {
      collection.sampledFrom.drilledFrom.locatedIn = countries.length ? countries[0] : {
        code: metadata.lake['country'],
        name: CountriesList.countries[metadata.lake['country']].name,
      };
      return Proxy.promise.where({ name: proxyName });
    })
    .then(proxies => {
      collection.providesWith = proxies.length ? proxies[0] : { name: proxyName };
      let predicate = Object.entries(metadata.publication)
        .filter(([key]) => ['title', 'doi', 'source', 'url'].includes(key))
        .reduce((accumulator, [key, value]) => {
          return Object.defineProperty(accumulator, key, { value: value, enumerable: true });
        }, {});
      return Publication.promise.where(predicate, { any: true });
    })
    .then(publications => {
      collection.referencedBy = publications.length ? publications : [metadata.publication];
      return Collection.promise.save(collection);
    })
    .then(persistedCollection => {
      collection = persistedCollection;
      let attributeNames = columnNames.filter(() => true);
      collection.includes = attributeNames.map(key => ({ name: key, characterizes: collection.providesWith }));
      let query = 'MATCH (node:Attribute)-[:CHARACTERIZES]->(:Proxy) WHERE node.name IN {names}';
      return Attribute.promise.query(query, { names: attributeNames });
    })
    .then(attributes => {
      collection.includes = collection.includes.map(attribute => {
        return attributes.find(obj => attribute.name === obj.name) || attribute;
      });
      return Collection.promise.save(collection);
    })
    .then(persistedCollection => {
      let seen = [];
      let overview = JSON.stringify(persistedCollection, function(key, val) {
        if (val != null && typeof val === "object") {
          if (seen.indexOf(val) >= 0) {
            return;
          }
          seen.push(val);
        }
        return val;
      }, 2);
      console.log('Updated meta information in the database:');
      console.log('---------------------------------------');
      console.log(overview);
      console.log('---------------------------------------');
      console.log('Adding the actual records to database...');
      const neo4j = require('neo4j-driver').v1;
      return new Promise(function (resolve, reject) {
        /** @type Session */ let session = database.session();
        let writeTxResultPromise = session.writeTransaction(function (transaction) {
          return records.map((row, index) => {
            let props = Object.entries(row).reduce((object, [key, value]) => {
              object[key] = value;
              return object;
            }, {});
            props['row_index'] = index;
            return transaction.run(`
              MATCH (n:Collection) WHERE id(n) = toInteger($id)
              CREATE (m:Record $props)
              MERGE (m)-[r:BELONGS_TO]->(n)
              RETURN n AS collection, m AS record
            `, { id: neo4j.int(persistedCollection.id), props });
          });
        });
        writeTxResultPromise.then(writtenRecords => {
          recordsCount += writtenRecords.length;
          console.log('Persisted ' + writtenRecords.length + ' records to the database.');
          console.log('---------------------------------------');
          session.close(() => {
            successCount++;
            resolve(0);
          });
        }).catch(err => {
          reject(err);
        });
      });
    })
    .catch(err => {
      errors.push(file);
      console.error(err.stack)
    });
};

const importFiles = async function () {
  let nextFile = files.shift();
  while (!!nextFile) {
    try {
      await importData(nextFile);
    } catch (e) {
      console.error(e);
      errors.push(nextFile);
    }
    nextFile = files.shift();
  }
  if (!successCount) {
    console.log('Sorry! Could not import any files.');
  }
};

importFiles().then(() => {
  database.close();
  let duration = (Date.now() - startTime) / 1000;
  if (successCount) {
    let s = successCount > 1 ? 's' : '';
    console.log('Done! Successfully imported ' + successCount + ' datasheet' + s + '.');
  }
  if (recordsCount) {
    let s = recordsCount > 1 ? 's' : '';
    console.log('A total number of ' + recordsCount + ' record' + s + ' were created.');
  }
  if (errors.length) {
    console.log('Attention! There were errors handling these files:');
    errors.forEach(path => console.log(path));
  }
  console.log('Execution finished after ' + duration + ' seconds.');
});
